<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAASVnxEklZ8JNKWfDjSlrx/Upa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH9Slnw40lZ
        8JNJWfESAAAAAEpZ8RRKWvHTSlrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8dNKWfEUSVnxkUpa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0lZ8ZFKWfHjSlrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slnx40pa8f1KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH9Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/SVnxsUpa
        8c9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0lZ8N9JWfBmSVnwZklZ8GZJWfBmSVnwZklZ8GZJWfBmSVnwiUpa
        8f9JWfFwSlrxAklZ8EhKWfHFSlrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/SVrwzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABKWvEESlrw20lZ8XAAAAAAAAAAAElZ8CRKWvCPSlrwj0lZ8MtKWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9JWvDNAAAAAAAAAAAAAAAASlnvJkpa
        7yhKWu8oSlrvKEpa7yhKWfCNSVnxcAAAAAAAAAAAAAAAAAAAAAAAAAAASlnxCkpa8K9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0la8M0AAAAAAAAAAAAA
        AABKWvDrSlrx/0pa8f9KWvH/Slrx/0pa8f9JWfFwAAAAAAAAAABIWO8CSFjvCEhY7whIWO8CSlvwBEpZ
        8ZFKWvD/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/SVrwzQAA
        AAAAAAAAAAAAAEpa8OtKWvH/Slrx/0pa8f9KWvH/Slrx/0lZ8XAAAAAAAAAAAElZ8DxJWfD3SVnw90lZ
        8B4AAAAASlnwAklZ8KtKWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9JWvDNAAAAAAAAAAAAAAAASlrw60pa8f9KWvH/Slrx/0pa8f9KWvH/SVnxcAAAAAAAAAAASlrwPkpa
        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
        8HBJWfDFSlrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH9Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/UpZ8ONKWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWfDjSVnwk0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0lZ
        8JNJWfESSlrx00pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvHTSVnxEgAAAABKWfEUSVnxkUpZ8eNKWvH9Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa8f9KWvH/Slrx/0pa
        8f1KWfHjSVnxkUpZ8RQAAAAAwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAH84AAB/vAAAf7+AAHA
        /wABwPOAAcDzgAHA84ABwPOAAfzzgAH+84AB/vOAAcDzgAHA84ABwPOAAcDzgAHA84AB/v+AAf7/gAAO
        f4AAAAAAAAAAAAAAAAAAAAAAgAAAAcAAAAM=
</value>
  </data>
</root>